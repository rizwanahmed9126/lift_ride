import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:geocoder/geocoder.dart';import 'package:geolocator/geolocator.dart';import 'package:google_maps_webservice/places.dart';import 'package:flutter_google_places/flutter_google_places.dart';import 'package:lift_login/models/Upload_Ride_Model.dart';import 'package:lift_login/screens/Home.dart';import 'package:google_maps_flutter/google_maps_flutter.dart';class Destination_search extends StatefulWidget {  final String value;  Destination_search({Key key, this.value}) : super(key: key);  @override  _Destination_searchState createState() => _Destination_searchState();}class _Destination_searchState extends State<Destination_search> {  String googleAPIKey = "AIzaSyDh3UZZ21MyxxjT3LpAI7GoBJ47XdPIqlo";  GoogleMapsPlaces _places = GoogleMapsPlaces(apiKey: "AIzaSyDh3UZZ21MyxxjT3LpAI7GoBJ47XdPIqlo",);  LatLng destinationLatLng;  final _pickup = TextEditingController(text: "Your Location");  final _destination = TextEditingController();  @override  Widget build(BuildContext context) {    return Scaffold(        body: Container(          height: 215,          decoration: BoxDecoration(              borderRadius: BorderRadius.circular(3.0),              color: Colors.white,              boxShadow: [                BoxShadow(                  color: Colors.grey,                  //offset: Offset(1.0, 2.0),                  blurRadius: 5,                  //spreadRadius: 1,                ),              ]),          child: Column(            crossAxisAlignment: CrossAxisAlignment.start,            children: [              Padding(                padding: const EdgeInsets.only(top: 30),                child: IconButton(                  icon: Icon(                    Icons.arrow_back_ios,                    color: Colors.black,                  ),                  onPressed: () {                    Navigator.pop(context);                  },                ),              ),              Container(                margin: EdgeInsets.only(top: 2, right: 10),                height: 40,                child: TextFormField(                  onTap: () {},                  decoration: InputDecoration(                    icon: Container(                      margin: EdgeInsets.only(                        left: 20,                        top: 5,                        right: 10,                        bottom: 20,                      ),                      width: 10,                      height: 10,                      child: Icon(                        Icons.location_on,                        color: Colors.black,                      ),                    ),                    hintText: "Pick Up",                    filled: true,                    fillColor: Colors.grey[200],                    enabledBorder: const OutlineInputBorder(                      borderSide: const BorderSide(color: Colors.white, width: 0.0),                    ),                    focusedBorder: const OutlineInputBorder(                      borderSide: const BorderSide(color: Colors.white, width: 0.0),                    ),                    contentPadding:                    EdgeInsets.only(left: 20.0, top: 10.0, bottom: 10),                  ),                ),              ),              Container(                margin: EdgeInsets.only(left: 28),                child: Icon(                  Icons.stop,                  size: 7,                ),              ),              Container(                margin: EdgeInsets.only(left: 28),                child: Icon(                  Icons.stop,                  size: 7,                ),              ),              Container(                height: 40,                margin: EdgeInsets.only(right: 10),                child: TextField(                  controller: _destination,                  onTap: () async{                    Prediction p = await PlacesAutocomplete.show(                      context: context,                      apiKey: googleAPIKey,                      mode: Mode.fullscreen, // Mode.fullscreen                      language: "en",                      components: [Component(Component.country,"pk")],                    );                    displayPrediction(p);                    PlacesDetailsResponse detail =                    await _places.getDetailsByPlaceId(p.placeId);                    double lat1 = detail.result.geometry.location.lat;                    double lng1 = detail.result.geometry.location.lng;                    destinationLatLng=LatLng(lat1,lng1);                  },                  cursorColor: Colors.blue.shade900,                  decoration: InputDecoration(                    icon: Container(                      margin: EdgeInsets.only(                        left: 20,                        top: 5,                        right: 10,                        bottom: 20,                      ),                      width: 10,                      height: 10,                      child: Icon(                        Icons.local_taxi,                        color: Colors.black,                      ),                    ),                    hintText: "Destination",                    filled: true,                    fillColor: Colors.grey[200],                    enabledBorder: const OutlineInputBorder(                      borderSide: const BorderSide(color: Colors.white, width: 0.0),                    ),                    focusedBorder: const OutlineInputBorder(                      borderSide: const BorderSide(color: Colors.white, width: 0.0),                    ),                    contentPadding:                    EdgeInsets.only(left: 20.0, top: 10.0, bottom: 10),                  ),                ),              ),              Container(                alignment: Alignment.centerRight,                padding: const EdgeInsets.all(12),                child: GestureDetector(                  onTap: (){                    Navigator.push(context, MaterialPageRoute(builder: (context)=>Home()));                  },                  child: Text(                    'Done',                    style: TextStyle(                      color: Colors.blue,                    ),                  ),                ),              )            ],          ),        )    );  }  Future<Null> displayPrediction(Prediction p) async {    if (p != null) {      PlacesDetailsResponse detail = await _places.getDetailsByPlaceId(p.placeId);      var address=detail.result.formattedAddress;      setState(() {        _destination.text=address;      });    }  }}